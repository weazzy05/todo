// Mocks generated by Mockito 5.4.4 from annotations
// in todo/test/src/core/rest_client/auth_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:http/http.dart' as _i3;
import 'package:intercepted_client/intercepted_client.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/src/core/rest_client/src/auth/auth_interceptor.dart'
    as _i2;
import 'package:todo/src/core/rest_client/src/auth/authorization_client.dart'
    as _i4;
import 'package:todo/src/core/rest_client/src/auth/token_storage.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToken_0 extends _i1.SmartFake implements _i2.Token {
  _FakeToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseRequest_1 extends _i1.SmartFake implements _i3.BaseRequest {
  _FakeBaseRequest_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthorizationClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationClient extends _i1.Mock
    implements _i4.AuthorizationClient<_i2.Token> {
  @override
  _i5.Future<bool> isRefreshTokenValid(_i2.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #isRefreshTokenValid,
          [token],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isAccessTokenValid(_i2.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #isAccessTokenValid,
          [token],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.Token> refresh(_i2.Token? token) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [token],
        ),
        returnValue: _i5.Future<_i2.Token>.value(_FakeToken_0(
          this,
          Invocation.method(
            #refresh,
            [token],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Token>.value(_FakeToken_0(
          this,
          Invocation.method(
            #refresh,
            [token],
          ),
        )),
      ) as _i5.Future<_i2.Token>);
}

/// A class which mocks [TokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenStorage extends _i1.Mock implements _i6.TokenStorage<_i2.Token> {
  @override
  _i5.Future<_i2.Token?> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i5.Future<_i2.Token?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Token?>.value(),
      ) as _i5.Future<_i2.Token?>);

  @override
  _i5.Future<void> save(_i2.Token? tokenPair) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [tokenPair],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i2.Token?> getStream() => (super.noSuchMethod(
        Invocation.method(
          #getStream,
          [],
        ),
        returnValue: _i5.Stream<_i2.Token?>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.Token?>.empty(),
      ) as _i5.Stream<_i2.Token?>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [RequestHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestHandler extends _i1.Mock implements _i7.RequestHandler {
  @override
  _i3.BaseRequest get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeBaseRequest_1(
          this,
          Invocation.getter(#request),
        ),
        returnValueForMissingStub: _FakeBaseRequest_1(
          this,
          Invocation.getter(#request),
        ),
      ) as _i3.BaseRequest);

  @override
  void rejectRequest(
    Object? error, {
    bool? next = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #rejectRequest,
          [error],
          {#next: next},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void next(_i3.BaseRequest? request) => super.noSuchMethod(
        Invocation.method(
          #next,
          [request],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolveResponse(
    _i3.StreamedResponse? response, {
    bool? next = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resolveResponse,
          [response],
          {#next: next},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ResponseHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseHandler extends _i1.Mock implements _i7.ResponseHandler {
  @override
  _i3.StreamedResponse get response => (super.noSuchMethod(
        Invocation.getter(#response),
        returnValue: _FakeStreamedResponse_2(
          this,
          Invocation.getter(#response),
        ),
        returnValueForMissingStub: _FakeStreamedResponse_2(
          this,
          Invocation.getter(#response),
        ),
      ) as _i3.StreamedResponse);

  @override
  _i3.BaseRequest get request => (super.noSuchMethod(
        Invocation.getter(#request),
        returnValue: _FakeBaseRequest_1(
          this,
          Invocation.getter(#request),
        ),
        returnValueForMissingStub: _FakeBaseRequest_1(
          this,
          Invocation.getter(#request),
        ),
      ) as _i3.BaseRequest);

  @override
  void rejectResponse(
    Object? error, {
    bool? next = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #rejectResponse,
          [error],
          {#next: next},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolveResponse(
    _i3.StreamedResponse? response, {
    bool? next = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resolveResponse,
          [response],
          {#next: next},
        ),
        returnValueForMissingStub: null,
      );
}
